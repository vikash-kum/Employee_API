// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "get all employees",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Employee"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "No"
                        }
                    }
                }
            },
            "post": {
                "description": "create employee",
                "parameters": [
                    {
                        "description": "body for user content",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Employee"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "int"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "body"
                        }
                    }
                }
            }
        },
        "/:aid": {
            "get": {
                "description": "find address by addressId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the addressed you want to get",
                        "name": "aid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Address"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "addressId"
                        }
                    }
                }
            },
            "put": {
                "description": "update the address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The addressId you want to update",
                        "name": "aid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "the addressId you want to update",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Address"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Address"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "addressId"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete the object",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The addressId you want to delete",
                        "name": "aid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "addressId"
                        }
                    }
                }
            }
        },
        "/:eid": {
            "get": {
                "description": "get employee by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The employeeId you want to get",
                        "name": "eid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Employee"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "employeeId"
                        }
                    }
                }
            },
            "put": {
                "description": "update the user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The employeeId you want to update",
                        "name": "eid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body for user content",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Employee"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "employeeId"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete the object",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The userId you want to delete",
                        "name": "eid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "eid"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Address": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "employee": {
                    "$ref": "#/definitions/models.Employee"
                },
                "id": {
                    "type": "integer"
                },
                "pin": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.Employee": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Address"
                    }
                },
                "age": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "empId": {
                    "type": "integer"
                },
                "firstName": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "mobile": {
                    "type": "string"
                },
                "origination": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Origination"
                    }
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "models.Origination": {
            "type": "object",
            "properties": {
                "designation": {
                    "type": "string"
                },
                "durationInYears": {
                    "type": "integer"
                },
                "employee": {
                    "$ref": "#/definitions/models.Employee"
                },
                "id": {
                    "type": "integer"
                },
                "originationName": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
